// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Random = require("bs-platform/lib/js/random.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var StringHelpers$ReactTemplate = require("./StringHelpers.bs.js");

var component = ReasonReact.reducerComponent("Example");

function blankTopic() {
  return /* record */[
          /* title */"",
          /* url */"",
          /* id */Random.$$int(10000)
        ];
}

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var topics = List.map((function (topic) {
                      return React.createElement("div", {
                                  key: String(topic[/* id */2]),
                                  className: "columns"
                                }, React.createElement("div", {
                                      className: "column"
                                    }, React.createElement("label", {
                                          className: "label"
                                        }, "Title"), React.createElement("input", {
                                          className: "input",
                                          placeholder: "Title",
                                          type: "text",
                                          value: topic[/* title */0],
                                          onChange: (function ($$event) {
                                              return Curry._1(self[/* send */3], /* Title */Block.__(0, [
                                                            topic[/* id */2],
                                                            $$event.target.value
                                                          ]));
                                            })
                                        })), React.createElement("div", {
                                      className: "column"
                                    }, React.createElement("label", {
                                          className: "label"
                                        }, "URL"), React.createElement("input", {
                                          className: "input",
                                          placeholder: "URL",
                                          type: "text",
                                          onChange: (function ($$event) {
                                              return Curry._1(self[/* send */3], /* Url */Block.__(1, [
                                                            topic[/* id */2],
                                                            $$event.target.value
                                                          ]));
                                            })
                                        })));
                    }), self[/* state */1][/* topics */1]);
              var titles = StringHelpers$ReactTemplate.mergeTitles(self[/* state */1][/* topics */1]);
              return React.createElement("div", undefined, React.createElement("section", {
                              className: "hero is-primary"
                            }, React.createElement("div", {
                                  className: "hero-body"
                                }, React.createElement("div", {
                                      className: "container"
                                    }, React.createElement("h1", {
                                          className: "title"
                                        }, "Meeting Minutes"), React.createElement("h2", {
                                          className: "subtitle"
                                        }, "Generate markdown")))), React.createElement("div", {
                              className: "container is-fluid"
                            }, React.createElement("br", undefined), React.createElement("label", {
                                  className: "label"
                                }, "Date"), React.createElement("input", {
                                  className: "input",
                                  type: "date",
                                  value: self[/* state */1][/* date */0],
                                  onChange: (function ($$event) {
                                      return Curry._1(self[/* send */3], /* Date */Block.__(2, [$$event.target.value]));
                                    })
                                }), React.createElement("br", undefined), $$Array.of_list(topics), React.createElement("p", undefined, "# Code Quality Meeting"), React.createElement("br", undefined), React.createElement("p", undefined, StringHelpers$ReactTemplate.constructDateString(self[/* state */1][/* date */0])), React.createElement("br", undefined), React.createElement("p", undefined, "## Agenda"), React.createElement("br", undefined), React.createElement("div", undefined, $$Array.of_list(titles)), React.createElement("button", {
                                  className: "button is-primary",
                                  onClick: (function () {
                                      return Curry._1(self[/* send */3], /* Add */0);
                                    })
                                }, "Add new topic")));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* date */"",
                      /* topics : :: */[
                        blankTopic(/* () */0),
                        /* [] */0
                      ]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                return /* Update */Block.__(0, [/* record */[
                            /* date */state[/* date */0],
                            /* topics */List.append(/* :: */[
                                  blankTopic(/* () */0),
                                  /* [] */0
                                ], state[/* topics */1])
                          ]]);
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      var title = action[1];
                      var id = action[0];
                      var topics = List.map((function (t) {
                              var match = t[/* id */2] === id;
                              if (match) {
                                return /* record */[
                                        /* title */title,
                                        /* url */t[/* url */1],
                                        /* id */t[/* id */2]
                                      ];
                              } else {
                                return t;
                              }
                            }), state[/* topics */1]);
                      return /* Update */Block.__(0, [/* record */[
                                  /* date */state[/* date */0],
                                  /* topics */topics
                                ]]);
                  case 1 : 
                      var url = action[1];
                      var id$1 = action[0];
                      var topics$1 = List.map((function (t) {
                              var match = t[/* id */2] === id$1;
                              if (match) {
                                return /* record */[
                                        /* title */t[/* title */0],
                                        /* url */url,
                                        /* id */t[/* id */2]
                                      ];
                              } else {
                                return t;
                              }
                            }), state[/* topics */1]);
                      return /* Update */Block.__(0, [/* record */[
                                  /* date */state[/* date */0],
                                  /* topics */topics$1
                                ]]);
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* date */action[0],
                                  /* topics */state[/* topics */1]
                                ]]);
                  
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.blankTopic = blankTopic;
exports.make = make;
/* component Not a pure module */
